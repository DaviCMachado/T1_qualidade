
üõ°Ô∏è RELAT√ìRIO DE SEGURAN√áA ‚Äì SQL INJECTION NA ROTA /consulta

---

Tipos de SQL Injection:

Boolean-based blind ‚Üí extrai info com base em respostas diferentes.

Time-based blind ‚Üí for√ßa o banco a demorar pra responder, revelando sucesso da inje√ß√£o.

Union-based ‚Üí injeta uma segunda consulta para extrair dados diretamente.


üî¥ ANTES DA CORRE√á√ÉO (VULNER√ÅVEL)

C√≥digo vulner√°vel:
------------------
query = f"SELECT nome, profissao, salario FROM pessoas WHERE nome LIKE '%{termo}%'"
c.execute(query)

Problemas identificados:
------------------------
- Concatena√ß√£o direta da entrada do usu√°rio (termo) na query.
- Total aus√™ncia de parametriza√ß√£o.
- A aplica√ß√£o n√£o valida o tamanho ou formato da entrada.
- Sanitiza√ß√£o ausente, expondo o HTML a inje√ß√£o de scripts (XSS).
- Detec√ß√£o do DBMS (SQLite): permitiu ao sqlmap usar payloads espec√≠ficos, mais eficazes.

Testes realizados com sqlmap:
-----------------------------
sqlmap -u "http://127.0.0.1:5000/consulta" --data="termo=teste" --batch --level=5 --risk=3 --flush-session

Resultados:
-----------
- Par√¢metro vulner√°vel: termo (POST)
- Banco de dados identificado: SQLite
- T√©cnicas exploradas com sucesso:
  ‚Ä¢ Boolean-based blind:
    termo=-1984' OR 4854=4854--
  ‚Ä¢ Time-based blind:
    termo=teste' OR 6220=LIKE(CHAR(...),UPPER(HEX(RANDOMBLOB(...))))--
  ‚Ä¢ UNION-based:
    termo=teste' UNION ALL SELECT NULL,NULL,CHAR(...)--

---

‚úÖ DEPOIS DA CORRE√á√ÉO (SEGURO)

C√≥digo corrigido:
-----------------
c.execute("SELECT nome, profissao, salario FROM pessoas WHERE nome LIKE ?", ('%' + termo + '%',))

Medidas implementadas:
----------------------
1. Parametriza√ß√£o segura da query (uso de ? com tupla).
2. Valida√ß√£o da entrada do usu√°rio (vazia ou muito longa).
3. Sanitiza√ß√£o com html.escape() antes de exibir no HTML.
4. Tratamento de exce√ß√µes com try/except para evitar mensagens sens√≠veis.
5. Log de acessos para auditoria futura.

Reexecu√ß√£o dos testes com sqlmap:
---------------------------------
sqlmap -u "http://127.0.0.1:5000/consulta" \ --data="termo=teste" \ --dbms=sqlite \ --level=5 \ --risk=3 \ --batch \ --flush-session


Resultados obtidos:
---------------------

[WARNING] POST parameter 'termo' does not seem to be injectable
[CRITICAL] all tested parameters do not appear to be injectable. 

---

üìå CONCLUS√ÉO

- A vulnerabilidade inicial permitia extra√ß√£o e manipula√ß√£o arbitr√°ria de dados via inje√ß√£o SQL.
- Ap√≥s as corre√ß√µes, a aplica√ß√£o passou a seguir boas pr√°ticas de seguran√ßa:
  ‚Ä¢ Uso de par√¢metros no SQL.
  ‚Ä¢ Valida√ß√£o e sanitiza√ß√£o adequadas.
- O sistema se tornou resistente √†s t√©cnicas utilizadas pelo sqlmap, como boolean, time-based e union.
